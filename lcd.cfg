#####################################################################
# 	Displays
#####################################################################

[display]
#	mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_bus = spi1

[neopixel btt_mini12864]
#	To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.0
initial_GREEN: 0.1
initial_BLUE: 0.5
color_order: RGB
#	Set RGB values on boot up for each Neopixel. 
#	Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=btt_mini12864 RED=0.2 GREEN=0.1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0.2 GREEN=0.1 BLUE=1 INDEX=2 TRANSMIT=0
        SET_LED LED=btt_mini12864 RED=0.2 GREEN=0.1 BLUE=1 INDEX=3 
        
[output_pin _BEEPER]
pin: EXP1_1
pwm: TRUE
value: 0
shutdown_value: 0
# PWM frequency : 0.001 = 1ms will give a base tone of 1kHz
cycle_time: 0.0024

[gcode_macro _LCD_VARIABLE]
variable_seriall: ' V2.none'
gcode:
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=seriall VALUE="{seriall}"
  SAVE_VARIABLE VARIABLE=seriall VALUE="{seriall}"

#####################################################################
# 	Splashscreen definition
#####################################################################
[include splash.cfg]

#####################################################################
# 	Glyph definition
#####################################################################
[display_glyph chamber]
data:
    0000000000000000
    1111111111111111
    1000010000100001
    1000010000100001
    1000011111100001
    1000000000000001
    1000000000000001
    1000001111000001
    1011101001011101
    1000001111000001
    1000000110000001
    1000000000000001
    1011111111111101
    1000100000010001
    1111111111111111
    0000000000000000
    
[display_glyph voron]
data:
    1111111001111111
    1111100000011111
    1111000000001111
    1100000000000011
    1000001100110001
    1000011001100001
    1000110011000001
    1001100110000001
    1000000110011001
    1000001100110001
    1000011001100001
    1000110011000001
    1110000000000111
    1111000000001111
    1111100000011111
    1111111001111111

[display_glyph voroninv]
data:
    0000001110000000
    0000111111100000
    0001111111110000
    0111111111111100
    1111100111001110
    1111001110011110
    1110011100111110
    1100111001111110
    1111110011100110
    1111100111001110
    1111001110011110
    1110011100111110
    0111111111111100
    0001111111110000
    0000111111100000
    0000001110000000
    
#####################################################################
# 	Display Data definition
#####################################################################
[display_template _vheater_temperature]
param_heater_name: "extruder"
text:
  {% if param_heater_name in printer %}
    {% set heater = printer[param_heater_name] %}
    # Show glyph
    {% if param_heater_name == "heater_bed" %}
      {% if heater.target %}
        {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
        ~bed_heat{frame}~
      {% else %}
        ~bed~
      {% endif %}
    {% else %}
      ~extruder~
    {% endif %}
    # Show temperature
    { "%3.0f" % (heater.temperature,) }
    # Optionally show target
    {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
      ~right_arrow~
      { "%0.0f" % (heater.target,) }
    {% endif %}
    ~degrees~
  {% endif %}

[display_data __voron_display extruder]
position: 0, 0
text: { render("_vheater_temperature", param_heater_name="extruder") }

[display_data __voron_display fan]
position: 0, 10
text:
  {% if 'fan' in printer %}
    {% set speed = printer.fan.speed %}
    {% if speed %}
      {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
      ~fan{frame}~
    {% else %}
      ~fan1~
    {% endif %}
    { "{:>4.0%}".format(speed) }
  {% endif %}

[display_data __voron_display bed]
position: 1, 0
text: { render("_vheater_temperature", param_heater_name="heater_bed") }

[display_data __voron_display progress_text]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { "{:^6.0%}".format(progress) }
  
[display_data __voron_display progress_text2]
position: 1, 10
text:
  {% set progress = printer.virtual_sdcard.progress %}
  { draw_progress_bar(1, 10, 6, progress) }

[display_data __voron_display printing_time]
position: 2, 10
text:
  {% set ptime = printer.print_stats.total_duration %}
  { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

[display_data __voron_display chamber]
position: 2, 0
text:
  {% if printer['gcode_macro _USER_VARIABLE'].chamber|lower != 'none' %}
    {% if printer['gcode_macro _USER_VARIABLE'].chamber|lower == 'fan' %}
      {% set chamber = printer['temperature_fan chamber'] %}
    {% elif printer['gcode_macro _USER_VARIABLE'].chamber|lower == 'sensor' %}
      {% set chamber = printer['temperature_sensor chamber'] %}
    {% endif %}
	~chamber~
	{ "%3.0f" % (chamber.temperature) }
	 ~degrees~
  {% endif %}

[display_data __voron_display print_status]
position: 3, 0
text: 
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time|int != 0 %}
    {% set pos = printer.toolhead.position %}
    { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
  {% else %}
    { printer['gcode_macro _LCD_VARIABLE'].seriall }
	~voron~
  {% endif %}
  
#####################################################################
# 	Bepper Macro
#####################################################################
#  M300 [P<ms>] [S<Hz>]
#  P is the tone duration, S the tone frequency.
#  The frequency won't be pitch perfect.
[gcode_macro M300]
description: Set Beeper value
#  Volume can be adjusted with VALUE. Maximum volume is VALUE=0.5 on the 12864.
gcode:
    # set default parameter value
    {% set freq = params.S|default(440)|float %}
    {% set time = params.P|default(100)|int %}
    {% if freq|float != 0 %}
        SET_PIN PIN=_BEEPER VALUE=0.3 CYCLE_TIME={1/freq}
    {% endif %}
    G4 P{time}
    SET_PIN PIN=_BEEPER VALUE=0
    
#####################################################################
# 	Macro
#####################################################################
[delayed_gcode _LCD_INIT_KNOB]
initial_duration: 1
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### end of definiton #####
  {% if ena_neo == 'true' %} 
    _LCD_KNOB COLOR=RED SYNC=0 
  {% endif %}
  

[delayed_gcode _LCD_INIT_OFF]
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### switch off if not already in menu #####
  {% if printer.menu.running|lower == 'false' and ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _LCD_KNOB]
description: Helper: Set LCD Knob color
variable_color: 'GREEN'
variable_restore: 'GREEN'
variable_index: 2
variable_blink: 0
variable_sync: 1
gcode:
  ##### set default parameter value #####
  {% set time = params.BLINK|default(0)|float %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=sync VALUE={params.SYNC|default(1)}
  {% set var_color=printer["gcode_macro _LCD_KNOB"].color %}
  {% set var_restore=printer["gcode_macro _LCD_KNOB"].restore %}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=blink VALUE={time}
  #UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={time}
  SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=restore VALUE='"{var_color}"'
  {% if params.COLOR == 'GREEN'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"GREEN"'
    SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=2 TRANSMIT=0 SYNC={sync} 
    SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=3 TRANSMIT=1 SYNC={sync}
  {% elif params.COLOR == 'RED'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"RED"'
    SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC={sync}
    SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1 SYNC={sync}
  {% elif params.COLOR == 'BLUE'%}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"BLUE"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=2 TRANSMIT=0 SYNC={sync}
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=3 TRANSMIT=1 SYNC={sync}
  {% else %}
    {% if var_restore == 'GREEN'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"GREEN"'
      SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0 GREEN=0.3 BLUE=0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_restore == 'RED'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"RED"'
      SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.5 GREEN=0 BLUE=0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_restore == 'BLUE'%}
      SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=color VALUE='"BLUE"'
      SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0.5 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% endif %}
  {% endif %}
  
[delayed_gcode _BLINK_DELAY]
gcode:
  {% set var_color=printer["gcode_macro _LCD_KNOB"].color %}
  {% set sync=printer["gcode_macro _LCD_KNOB"].sync %}
  {% if printer["gcode_macro _LCD_KNOB"].index|int == 2 %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=3
    {% if var_color == 'GREEN'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.3 BLUE=0.0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_color == 'RED'%}
      SET_LED LED=neo_display RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_color == 'BLUE'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% endif %}
  {% else %}
    SET_GCODE_VARIABLE MACRO=_LCD_KNOB VARIABLE=index VALUE=2
    {% if var_color == 'GREEN'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.0 GREEN=0.3 BLUE=0.0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_color == 'RED'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.5 GREEN=0.0 BLUE=0.0 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% elif var_color == 'BLUE'%}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.0 INDEX=2 TRANSMIT=0 SYNC={sync}
      SET_LED LED=neo_display RED=0.0 GREEN=0.0 BLUE=0.5 INDEX=3 TRANSMIT=1 SYNC={sync}
    {% endif %}
  {% endif %}
  #UPDATE_DELAYED_GCODE ID=_BLINK_DELAY DURATION={printer["gcode_macro _LCD_KNOB"].blink|float}

[gcode_macro DISPLAY]
description: Toggle Display backlight
variable_state: 'on'
gcode:
  {% if printer["gcode_macro DISPLAY"].state == 'on' %}
    _DISPLAY_OFF
  {% else %}
    _DISPLAY_ON
  {% endif %}
  _DISPLAY_STATE
    
[gcode_macro _DISPLAY_STATE]
description: Helper: Print display backlight state
gcode:
  {action_respond_info("LCD display %s" % (printer["gcode_macro DISPLAY"].state))}

[gcode_macro _DISPLAY_OFF]
description: Helper: Display backlight off
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### switch off if not already in menu #####
  {% if printer.menu.running|lower == 'false' and ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"off"'
    SET_LED LED=neo_display RED=0 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}

[gcode_macro _DISPLAY_ON]
description: Helper: Display backlight on
gcode:
  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  ##### end of definiton #####
  {% if ena_neo == 'true' %}
    SET_GCODE_VARIABLE MACRO=DISPLAY VARIABLE=state VALUE='"on"'
    SET_LED LED=neo_display RED=0.8 GREEN=0.8 BLUE=1.0 INDEX=1 TRANSMIT=1 SYNC=0
  {% endif %}